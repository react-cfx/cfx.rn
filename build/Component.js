// Generated by CoffeeScript 1.10.0
var AppRegistry, Component, RN, assign,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

assign = Object.assign;

AppRegistry = (RN = require('react-native')).AppRegistry;

Component = require('react').Component;

module.exports = {
  reg: AppRegistry.registerComponent,
  "new": function(component) {
    var callWithState, componentObj, newComponent;
    componentObj = {};
    if (typeof component === 'function') {
      componentObj.render = component;
    } else if (typeof component === 'object') {
      if (!component.render) {
        return;
      }
      componentObj = assign({}, componentObj, component);
    } else {
      return;
    }
    callWithState = function(Func) {
      if (!this.props.state) {
        return Func.call(this, this.props);
      } else {
        return Func.call(this, this.props, this.props.state);
      }
    };
    return newComponent = (function(superClass) {
      var k, v, waitToBinds;

      extend(newComponent, superClass);

      waitToBinds = [];

      for (k in componentObj) {
        v = componentObj[k];
        if (k === 'render' || k === 'constructor') {
          continue;
        }
        if (typeof v === 'function') {
          newComponent.prototype[k] = function() {
            return callWithState.call(this, componentObj._pressButton);
          };
          waitToBinds.push(k);
        } else {
          newComponent.prototype[k] = v;
        }
      }

      function newComponent(props) {
        var funcName, i, len;
        newComponent.__super__.constructor.call(this, props);
        if (componentObj.constructor) {
          callWithState.call(this, componentObj.constructor);
        }
        for (i = 0, len = waitToBinds.length; i < len; i++) {
          funcName = waitToBinds[i];
          this[funcName] = componentObj[funcName].bind(this);
        }
        this;
      }

      newComponent.prototype.render = function() {
        return callWithState.call(this, componentObj.render);
      };

      return newComponent;

    })(Component);
  }
};
